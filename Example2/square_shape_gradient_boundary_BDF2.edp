// Boundary type "shape gradient"
load "lapack"  
load "msh3"

// Time
real M = 500; 
real T = 1;
real dt = T/M; // dt = k
real t;

// Function
real ku = 0.1; // Adjust the order of magnitude
real alpha = 3; //sin(alpha*pi*x)
real beta = 3; //sin(beta*pi*y)
real kappa= 1;
func uExact = - ku*3*sin(pi*alpha*x)*sin(pi*beta*y)*(T - t)^2 - ku*(alpha^2+beta^2)*pi^2*sin(pi*alpha*x)*sin(pi*beta*y)*(T - t)^3;
func vExact = ku*(t-T)^3*sin(alpha*pi*x)*sin(beta*pi*y);
func f =  ku*6*sin(pi*alpha*x)*sin(pi*beta*y)*(T - t) - ku*(alpha^2+beta^2)^2*pi^4*sin(pi*alpha*x)*sin(pi*beta*y)*(T - t)^3;

// Dual space
int gamma = 3; 
int gamNum = (gamma + 1) * (gamma + 2) / 2; 
ofstream file("error_alpha_beta.txt", append);  
file<<"BDF2"<<" gamma = "<< gamma <<"  M = "<< M <<endl;
file<<"alpha = "<< alpha <<"  beta = "<< beta <<"  ku = "<< ku <<endl;

// Mesh size
int n,m; 
for(n=2;n<=7;n++){ 
t = 0;
int Node = 2^n;
mesh Th = square(Node,Node); 

// Fespace
fespace Vh(Th, P1);
Vh u, uu, uuu, v, vv, vvv, w, ux, uy, vx, vy;
Vh[int] U(M+1),V(M+1);

// Parabolic
problem ParabolicCN(u, v)= int2d(Th)(
    2*u*v
    + kappa*dt*(dx(u)*dx(v) + dy(u)*dy(v))
    )
    + int2d(Th)(
    - 2*uu*v
    + kappa*dt*(dx(uu)*dx(v) + dy(uu)*dy(v))
    )
    + int2d(Th)(
    - 2*dt*f*v // f_(1/2)dt
    )
    + on(1, 2, 3, 4, u=0); // Dirichelet boundry

problem ParabolicBDF2 (u, v, init=m-2)= int2d(Th)(  // the matrix is reconstructed when init= false or 0 
    3*u*v
    + kappa*2*dt*(dx(u)*dx(v) + dy(u)*dy(v))
    )
    + int2d(Th)(
    - 4*uu*v
    + uuu*v
    - 2*dt*f*v
    )
    + on(1, 2, 3, 4, u=0); // Dirichelet boundry

for (m = 1; m <= M; m++){ 
    t = t+dt;
    if (m == 1) {
        t = t - dt/2;
        uu = - ku*3*sin(pi*alpha*x)*sin(pi*beta*y)*T^2 - ku*(alpha^2+beta^2)*pi^2*sin(pi*alpha*x)*sin(pi*beta*y)*T^3;
        U[0] = uu;
        ParabolicCN; 
    }
    else ParabolicBDF2; 
    U[m] = u;
    uuu = uu;
    uu = u; 
}
  
// Adjoint 
problem AdjointEuler (v, w)= int2d(Th)(
    v*w
    + kappa*dt*(dx(v)*dx(w) + dy(v)*dy(w))
    )
    + int2d(Th)(
    - vv*w
    - dt*u*w // u_M-1 
    )
    + on(1, 2, 3, 4, v=0); // Dirichelet boundry

problem AdjointBDF2 (v, w, init=-m+M-2)= int2d(Th)(  // the matrix is reconstructed iwhen init= false or 0 
    3*v*w
    + kappa*2*dt*(dx(v)*dx(w) + dy(v)*dy(w))
    )
    + int2d(Th)(
    - 4*vv*w
    + vvv*w
    - 2*dt*u*w 
    )
    + on(1, 2, 3, 4, v=0); // Dirichelet boundry

for (m = M-1; m >= 0; m--){  
    u = U[m];
    t = t - dt;
    if (m == M-1) {
        V[M] = 0;
        vv = 0;
        AdjointEuler;
    }
    else AdjointBDF2; 
    V[m] = v;
    vvv = vv;
    vv = v; 
}

// Eulerian derivative
real[int] error1(gamNum), error2(gamNum); 
real[int] KinvErr1(gamNum), KinvErr2(gamNum);
real[int,int] K(gamNum,gamNum), Kinv(gamNum,gamNum);
real Bdy;
Vh[int] theta(gamNum);

m = 0;
// basis
for(int i=0;i<=gamma;i++)
    for(int j=0;j<=gamma-i;j++)
        theta[m++] = x^i*y^j; 

// Mass matric
for(int i=0;i<gamNum;i++)
    for(int j=0;j<gamNum;j++)
        K(i,j) = int2d(Th,qft=qf5pT) ( theta[i]*theta[j] + dx(theta[i])*dx(theta[j]) + dy(theta[i])*dy(theta[j]) );
Kinv = K^-1;
u = U[M];
for(int i=0;i<gamNum;i++)
{
    error1[i] = 0;
    error2[i] = 0;
    m=0;
    // Composite trapezoid
    for (t=0 ; t<=T ; t=t+dt){   
        ux = - ku*3*alpha*pi*cos(pi*alpha*x)*sin(pi*beta*y)*(T - t)^2 - ku*(alpha^2 + beta^2)*alpha*pi^3*cos(pi*alpha*x)*sin(pi*beta*y)*(T - t)^3;
        uy = - ku*3*beta*pi*cos(pi*beta*y)*sin(pi*alpha*x)*(T - t)^2 - ku*(alpha^2 + beta^2)*beta*pi^3*cos(pi*beta*y)*sin(pi*alpha*x)*(T - t)^3;
        vx = -ku*alpha*pi*cos(pi*alpha*x)*sin(pi*beta*y)*(T - t)^3;
        vy = -ku*beta*pi*cos(pi*beta*y)*sin(pi*alpha*x)*(T - t)^3;
        u  = - ku*3*sin(pi*alpha*x)*sin(pi*beta*y)*(T - t)^2 - ku*(alpha^2+beta^2)*pi^2*sin(pi*alpha*x)*sin(pi*beta*y)*(T - t)^3;
        if(t==0 || t==T){
            error1[i] = error1[i] + abs((dt/2)*int1d(Th,1,2,3,4,qft=qf5pT)( ( (1/2)*u^2 + kappa*(ux*N.x+uy*N.y)*(vx*N.x+vy*N.y))*theta[i]*N.x )
                        - (dt/2)*int1d(Th,1,2,3,4,qft=qf5pT)( ( (1/2)*(U[m])^2 + kappa*(dx(U[m])*N.x+dy(U[m])*N.y)*(dx(V[m])*N.x+dy(V[m])*N.y) )*theta[i]*N.x ));
            error2[i] = error2[i] + abs((dt/2)*int1d(Th,1,2,3,4,qft=qf5pT)( ( (1/2)*u^2 + kappa*(ux*N.x+uy*N.y)*(vx*N.x+vy*N.y))*theta[i]*N.y )
                        - (dt/2)*int1d(Th,1,2,3,4,qft=qf5pT)( ( (1/2)*(U[m])^2 + kappa*(dx(U[m])*N.x+dy(U[m])*N.y)*(dx(V[m])*N.x+dy(V[m])*N.y) )*theta[i]*N.y ));
        }
        else{
            error1[i] = error1[i] + abs(dt*int1d(Th,1,2,3,4,qft=qf5pT)( ( (1/2)*u^2 + kappa*(ux*N.x+uy*N.y)*(vx*N.x+vy*N.y))*theta[i]*N.x )
                        - dt*int1d(Th,1,2,3,4,qft=qf5pT)( ( (1/2)*(U[m])^2 + kappa*(dx(U[m])*N.x+dy(U[m])*N.y)*(dx(V[m])*N.x+dy(V[m])*N.y) )*theta[i]*N.x ));
            error2[i] = error2[i] + abs(dt*int1d(Th,1,2,3,4,qft=qf5pT)( ( (1/2)*u^2 + kappa*(ux*N.x+uy*N.y)*(vx*N.x+vy*N.y))*theta[i]*N.y )
                        - dt*int1d(Th,1,2,3,4,qft=qf5pT)( ( (1/2)*(U[m])^2 + kappa*(dx(U[m])*N.x+dy(U[m])*N.y)*(dx(V[m])*N.x+dy(V[m])*N.y) )*theta[i]*N.y ));
        }
    m++;
    }
}

KinvErr1 = Kinv*error1;
KinvErr2 = Kinv*error2;
Bdy = (error1)'*KinvErr1 + (error2)'*KinvErr2;
Bdy = Bdy^0.5; 
file<<"Node = "<< Node <<" Error = "<< Bdy <<endl;
}

