//Error of adjoint problem of parabolic equation
//square, BDF2_CN

// Time
real M = 100; 
real T = 3;
real dt = T/M; // dt = k
real t = dt/2;

// Mesh
int Node = 16; // Mesh refinement
mesh Th = square(Node,Node,flags=1); // Union Jacdt flag type of mesh
int m; // init=m-2

// Norm
real l2 = 0;
real linfty = 0;
real W02;
real W12;
real ku = 0.05; // Adjust the order of magnitude

// Function
real alpha = 1; //sin(alpha*pi*x)
real beta = 1; //sin(beta*pi*y)
func vExact = ku*(t-T)^3*sin(alpha*pi*x)*sin(beta*pi*y);
func vxExact = -ku*alpha*pi*cos(pi*alpha*x)*sin(pi*beta*y)*(T - t)^3;
func vyExact = -ku*beta*pi*cos(pi*beta*y)*sin(pi*alpha*x)*(T - t)^3;
func uExact = - ku*3*sin(pi*alpha*x)*sin(pi*beta*y)*(T - t)^2 - ku*(alpha^2+beta^2)*pi^2*sin(pi*alpha*x)*sin(pi*beta*y)*(T - t)^3;
func uxExact = - ku*3*alpha*pi*cos(pi*alpha*x)*sin(pi*beta*y)*(T - t)^2 - ku*(alpha^2 + beta^2)*alpha*pi^3*cos(pi*alpha*x)*sin(pi*beta*y)*(T - t)^3;
func uyExact = - ku*3*beta*pi*cos(pi*beta*y)*sin(pi*alpha*x)*(T - t)^2 - ku*(alpha^2 + beta^2)*beta*pi^3*cos(pi*beta*y)*sin(pi*alpha*x)*(T - t)^3;
func f =  ku*6*sin(pi*alpha*x)*sin(pi*beta*y)*(T - t) - ku*(alpha^2+beta^2)^2*pi^4*sin(pi*alpha*x)*sin(pi*beta*y)*(T - t)^3;

// Fespace
fespace Vh(Th, P1);
Vh u, uu, uuu, v, vv, vvv;
Vh[int] U(M+1);

problem parabolicCN(u, v)= int2d(Th)(
2*u*v
+ dt*(dx(u)*dx(v) + dy(u)*dy(v))
)
+ int2d(Th)(
- 2*uu*v
+ dt*(dx(uu)*dx(v) + dy(uu)*dy(v))
)
+ int2d(Th)(
- 2*dt*f*v // f_(1/2)dt
)
+ on(1, 2, 3, 4, u=0); // Dirichelet boundry

// Parabolic
problem parabolicBDF2 (u, v, init=m-2)= int2d(Th)(  // the matrix is reconstructed iwhen init= false or 0 
3*u*v
+ 2*dt*(dx(u)*dx(v) + dy(u)*dy(v))
)
+ int2d(Th)(
- 4*uu*v
+ uuu*v
- 2*dt*f*v
)
+ on(1, 2, 3, 4, u=0); // Dirichelet boundry

// Time loop
for (m = 1; m <= M; m++){ 
    if (m == 1) { 
        uu = - ku*3*sin(pi*alpha*x)*sin(pi*beta*y)*T^2 - ku*(alpha^2+beta^2)*pi^2*sin(pi*alpha*x)*sin(pi*beta*y)*T^3;
        U[0] = uu;
        cout << "t=" << t+dt/2 << endl;
        parabolicCN;
        t = t+dt/2; 
    }
    else {
        t = t+dt;
        cout << "t=" << t << endl;
        parabolicBDF2; 
    }

    // Norms calculation
    W02 = int2d(Th)((u-uExact)^2);
    W12 = W02 + int2d(Th)((uxExact-dx(u))^2+(uyExact-dy(u))^2);
    l2 = l2 + W12;
    W02 = sqrt(W02);
    if(W02 > linfty){
        linfty = W02;
    }
    
    // Update
    U[m] = u;
    uuu = uu;
    uu = u; 
}

// Export data
l2 = sqrt(l2 * dt);  
ofstream file("error_data.txt", append);  
file << "Parabolic : Fineness of the grid = " << Node << " ; Time step = " << dt <<" ; l^2 norm = " << l2 <<"  ; l^infty norm = " << linfty << endl;
cout << "Error of parabolic equation: l^infty norm = " <<  linfty << endl;

cout << "================== Adjoint ==================" << endl;

// Adjoint
t = t - dt; // Time
l2 = 0; // Norm
linfty = 0;
Vh w; // Fespace

// backward Euler of adjoint 
problem AdjointBE (v, w)= int2d(Th)(
v*w
+ dt*(dx(v)*dx(w) + dy(v)*dy(w))
)
+ int2d(Th)(
- vv*w
- dt*u*w // u_M-1 
)
+ on(1, 2, 3, 4, v=0); // Dirichelet boundry

// Adjoint
problem AdjointBDF2 (v, w, init=-m+M-2)= int2d(Th)(  // the matrix is reconstructed iwhen init= false or 0 
3*v*w
+ 2*dt*(dx(v)*dx(w) + dy(v)*dy(w))
)
+ int2d(Th)(
- 4*vv*w
+ vvv*w
- 2*dt*u*w 
)
+ on(1, 2, 3, 4, v=0); // Dirichelet boundry

// Time loop
for (m = M-1; m >= 0; m--){  
    u = U[m];
    if (m == M-1) {
        vv = 0;
        cout << "t=" << t << endl;
        AdjointBE;
    }
    else {
        t = t-dt;
        cout << "t=" << t << endl;        
        AdjointBDF2; 
    }

    // Norms calculation
    W02 = int2d(Th)((v-vExact)^2);
    W12 = W02 + int2d(Th)((vxExact-dx(v))^2+(vyExact-dy(v))^2);
    l2 = l2 + W12;
    W02 = sqrt(W02);
    if(W02 > linfty){
        linfty = W02;
    }

    // Update
    vvv = vv;
    vv = v; 
}

// Export data
l2 = sqrt(l2 * dt);  
 file << "Adjoint    : Fineness of the grid = " << Node << " ; Time step = " << dt <<" ; l^2 norm = " << l2 <<"  ; l^infty norm = " << linfty << endl;
 cout << "Error of parabolic equation: l^infty norm = " <<  linfty << endl;
